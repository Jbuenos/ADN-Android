plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'jacoco'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    compileSdk 32

    defaultConfig {
        applicationId "com.jomibusa.adn_android"
        minSdk 27
        targetSdk 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled true
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            unitTests.returnDefaultValues = true
        }
    }
    subprojects {
        configurations.all {
            resolutionStrategy {
                eachDependency { details ->
                    if ('org.jacoco' == details.requested.group) {
                        details.useVersion jacocoVersion
                    }
                }
            }
        }
    }
    buildFeatures {
        viewBinding = true
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'com.google.android.material:material:1.6.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation("androidx.room:room-runtime:2.4.2")
    annotationProcessor("androidx.room:room-compiler:2.4.2")
    kapt "androidx.room:room-compiler:2.4.2"
}

task jacocoTestReport(type: JacocoReport,
        dependsOn: ['testDebugUnitTest', 'createDebugCoverageReport']) {
    def myModule = project(':app')
    layout.files("$buildDir/tmp/kotlin-classes/debug")
    def dotClassesFiles = layout.files("$buildDir/tmp/kotlin-classes/debug", "$myModule.buildDir/tmp/kotlin-classes/debug")
    def mainSources = layout.files("$project.projectDir/src/main/java", "$myModule.projectDir/src/main/java")
    def executionFilesForInstrumentationTest = fileTree(
            dir: "$buildDir",
            includes: ["outputs/code_coverage/debugAndroidTest/connected/**/coverage.ec"]
    )

    def executionFileForNonInstrumentationInModule = "$buildDir/outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
    def executionFiles = layout.files(
            executionFilesForInstrumentationTest,
            executionFileForNonInstrumentationInModule
    )

    sourceDirectories.setFrom(files([mainSources]))
    classDirectories.setFrom(files([dotClassesFiles.asFileTree]))
    executionData.setFrom(executionFiles.asFileTree)

    reports {
        xml.enabled true
        html.enabled true
    }

}